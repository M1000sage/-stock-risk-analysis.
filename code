import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def get_stock_data(ticker):
    try:
        stock = yf.download(ticker, period="max")
        
        if stock.empty:
            print(f"No data found for {ticker}. Check the ticker symbol.")
            return None

        stock["Price"] = stock.get("Adj Close", stock.get("Close"))

        if stock["Price"].isna().all():
            print(f"Error: No valid price data available for {ticker}.")
            return None

        stock["Returns"] = stock["Price"].pct_change()
        return stock
    except Exception as e:
        print(f"Error fetching data: {e}")
        return None

def risk_analysis(stock_data):
    stock_returns = stock_data["Returns"].dropna()
    
    if stock_returns.empty:
        print("Not enough data to calculate risk metrics.")
        return None

    volatility = np.std(stock_returns) * np.sqrt(252)
    VaR_95 = np.percentile(stock_returns, 5) if len(stock_returns) > 10 else np.nan
    CVaR_95 = stock_returns[stock_returns <= VaR_95].mean() if not np.isnan(VaR_95) else np.nan
    sharpe_ratio = (stock_returns.mean() / np.std(stock_returns)) * np.sqrt(252) if np.std(stock_returns) > 0 else np.nan

    return {"Volatility": volatility, "VaR_95": VaR_95, "CVaR_95": CVaR_95, "Sharpe Ratio": sharpe_ratio}

def plot_stock(stock_data, ticker):
    plt.figure(figsize=(12, 6))
    plt.plot(stock_data.index, stock_data["Price"], label="Stock Price", color="blue")
    plt.title(f"{ticker} Stock Price History")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid()
    plt.show()

def plot_returns(stock_data, ticker):
    sns.histplot(stock_data["Returns"].dropna(), bins=50, kde=True, color="red")
    plt.title(f"{ticker} Daily Returns Distribution")
    plt.xlabel("Daily Return")
    plt.ylabel("Frequency")
    plt.show()

def save_stock_data(stock_data, ticker):
    filename_csv = f"{ticker}_stock_data_full_history.csv"
    filename_xlsx = f"{ticker}_stock_data_full_history.xlsx"

    stock_data.to_csv(filename_csv)
    stock_data.to_excel(filename_xlsx)

    print(f"\nStock data saved as {filename_csv} and {filename_xlsx}")

def main():
    ticker = input("Enter stock ticker (e.g., AAPL or TATAMOTORS for India): ").upper()

    primary_ticker = ticker + ".NS"
    fallback_ticker = ticker + ".BO"

    stock_data = get_stock_data(primary_ticker)
    
    if stock_data is None:
        print(f"Trying BSE ticker: {fallback_ticker}")
        stock_data = get_stock_data(fallback_ticker)

    if stock_data is None:
        print(f"Failed to fetch data for {ticker}. Check the symbol on Yahoo Finance.")
        return

    risks = risk_analysis(stock_data)

    if risks:
        print("\nRisk Analysis for Entire Market Period:")
        for key, value in risks.items():
            print(f"{key}: {value:.4f}" if not np.isnan(value) else f"{key}: Data not sufficient")

    save_stock_data(stock_data, ticker)
    plot_stock(stock_data, ticker)
    plot_returns(stock_data, ticker)

if __name__ == "__main__":
    main()